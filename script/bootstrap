#!/usr/bin/env bash
# shellcheck disable=SC1091
#
# bootstrap installs things.

# Shell Support
[[ -z "$SHELLSUPPORT" ]] && . "$( cd "${BASH_SOURCE%/*}/.." && pwd )/shell/support.sh"

[[ -z "$DOTFILES" ]] && DOTFILES="$HOME/.dotfiles"

if ! type "sh_success" &> /dev/null; then
  . "$DOTFILES/functions/sh_alert"
  . "$DOTFILES/functions/sh_error"
  . "$DOTFILES/functions/sh_fail"
  . "$DOTFILES/functions/sh_info"
  . "$DOTFILES/functions/sh_note"
  . "$DOTFILES/functions/sh_user"
  . "$DOTFILES/functions/sh_success"
  . "$DOTFILES/functions/sh_text"
  . "$DOTFILES/functions/sh_yesno"
fi

#-------------------------------------------------------------------------------
# SUDO
#-------------------------------------------------------------------------------

# Ask for the administrator password upfront.
sudo -v

# Keep-alive: update existing `sudo` time stamp until the script has finished.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

set -e

#-------------------------------------------------------------------------------
# GIT CONFIG
#-------------------------------------------------------------------------------

setup_gitconfig () {
  if [[ ! -r "$DOTFILES/git/gitconfig.symlink" ]]; then
    sh_info 'Setting up gitconfig.symlink'
    # Set Git credential storage.
    git_credential='cache'
    [[ "$OSTYPE" == "darwin"* ]] && git_credential='osxkeychain'
    # Get user inputs.
    sh_user 'What is your github author name?  (username)'
    read -r -e git_authorname
    sh_user 'What is your github author email?  (username@users.noreply.github.com)'
    read -r -e git_authoremail
    # Inject Git user info to gitconfig.symlink, using config-template.
    sed -e "s/AUTHORNAME/$git_authorname/g" \
        -e "s/AUTHOREMAIL/$git_authoremail/g" \
        -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
        "$DOTFILES/git/gitconfig.symlink.example" > "$DOTFILES/git/gitconfig.symlink"
    # Evaluate success
    [[ -r "$DOTFILES/git/gitconfig.symlink" ]] && \
      sh_success 'gitconfig.symlink is now ready for symlinking to ~/.gitconfig'
  else
    sh_note 'gitconfig.symlink already exists. Please edit manually.'
  fi
}

sh_yesno 'Would you like to configure the '~/.gitconfig' file/symlink?'
read -r -e _answer
[[ "$_answer" == "y"* ]] && setup_gitconfig

#-------------------------------------------------------------------------------
# SYMLINK DOTFILES
#-------------------------------------------------------------------------------

. "$DOTFILES/functions/link_file"
. "$DOTFILES/functions/install_dotfiles"

install_dotfiles

#-------------------------------------------------------------------------------
# HOMEBREW + required dependencies
#-------------------------------------------------------------------------------
# Here's is the install list/order:
#   * Linux libraries/dependencies
#   * macOS Xcode Command Line Tools
#   * Homebrew

. "$DOTFILES/brew/init_install.sh"
_init_or_install_homebrew

if ! type "brew" &> /dev/null; then
  sh_error "Install of Homebrew not found."
  sh_fail "Please install manually. See: https://brew.sh"
fi

if [[ -z "${HOMEBREW_PREFIX:-}" ]]; then
  sh_error "HOMEBREW_PREFIX variable not set."
  sh_fail "Try restarting your shell environment, or reinstalling Homebrew."
fi

# sh_info "Configuring homebrew permissions to allow multiple admin users."
# sh_info "Any user from the admin group will be able to manage homebrew."

# declare -a HOMEBREW_DIRS=(
#   "${HOMEBREW_PREFIX:-}/Caskroom"
#   "${HOMEBREW_PREFIX:-}/Cellar"
#   "${HOMEBREW_PREFIX:-}/Homebrew"
#   "${HOMEBREW_PREFIX:-}/etc"
#   "${HOMEBREW_PREFIX:-}/lib"
#   "${HOMEBREW_PREFIX:-}/share"
#   "${HOMEBREW_PREFIX:-}/var"
# )
# for brew_dir in "${HOMEBREW_DIRS[@]}"; do
#   if [[ ! -d "${brew_dir}" ]]; then
#     sh_info "Creating directory: ${brew_dir}"
#     mkdir "${brew_dir}"
#   fi
#   sh_info "Changing group ownership of directory: ${brew_dir}"
#   sudo chgrp -R admin "${brew_dir}"
#   sudo chmod -R g+w "${brew_dir}"
# done
# ls -al "${HOMEBREW_PREFIX:-}"

#-------------------------------------------------------------------------------
# GIT / RUBY
#-------------------------------------------------------------------------------

[[ ! -d "${HOMEBREW_PREFIX:-}/opt/git" ]] && brew install git
[[ ! -d "${HOMEBREW_PREFIX:-}/opt/ruby" ]] && brew install ruby

#-------------------------------------------------------------------------------
# Zsh + Prezto
#-------------------------------------------------------------------------------

# Install Prezto first to be ready for Zsh config.
if [[ ! -d "$HOME/.zprezto" ]]; then
  sh_info "Installing Prezto to the home directory: ~/.prezto"
  if type "git" &> /dev/null; then
    git clone --recursive https://github.com/sorin-ionescu/prezto.git "$HOME/.zprezto"
  elif type "curl" &> /dev/null; then
    cd || echo
    curl -LOk https://github.com/sorin-ionescu/prezto/archive/master.zip \
    && unzip master.zip && mv prezto-master .prezto && rm master.zip
  fi
fi

# Install Zsh and Zsh-completions
if [[ ! -e "${HOMEBREW_PREFIX:-}/bin/zsh" ]]; then
  sh_info "Install Zsh and Zsh-completions"
  brew install zsh zsh-completions
  # Install oh-my-zsh on top of zsh to getting additional functionality
  # curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
fi
# Add Zsh to the list of allowed shells
if [[ -e "${HOMEBREW_PREFIX:-}/bin/zsh" ]] && [[ ! "$(cat /etc/shells)" == *"${HOMEBREW_PREFIX:-}/bin/zsh"* ]]; then
  sh_info "Adding Zsh to the list of allowed shells (/etc/shells)."
  sudo bash -c 'echo "$(brew --prefix)/bin/zsh" >> /etc/shells'
else
  sh_fail "Error locating Homebrew and/or Zsh. Please install manually."
fi

echo

sh_success "Bootstrapping complete."

sh_alert "Restart the terminal and run: ~/.dotfiles/install"

echo
