#!/usr/bin/env bash
#
# bootstrap installs things.

# Shell Support
[[ -z "$SHELLSUPPORT" ]] && . "$( cd "${BASH_SOURCE%/*}/.." && pwd )/shell/support.sh"

[[ -z "$DOTFILES" ]] && DOTFILES="$HOME/.dotfiles"

if ! type "sh_success" &> /dev/null; then
  . $DOTFILES/functions/sh_alert
  . $DOTFILES/functions/sh_error
  . $DOTFILES/functions/sh_fail
  . $DOTFILES/functions/sh_info
  . $DOTFILES/functions/sh_note
  . $DOTFILES/functions/sh_user
  . $DOTFILES/functions/sh_success
  . $DOTFILES/functions/sh_text
fi

#-----------------------------------------------------------------------
# SUDO
#-----------------------------------------------------------------------

# Ask for the administrator password upfront.
sudo -v

# Keep-alive: update existing `sudo` time stamp until the script has finished.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

set -e

#-----------------------------------------------------------------------
# GIT CONFIG
#-----------------------------------------------------------------------

setup_gitconfig () {
    if [ ! -f "$DOTFILES/git/gitconfig.symlink" ]; then
        sh_info 'Setting up gitconfig.symlink'

        git_credential='cache'
        if [[ "$OSTYPE" == "darwin"* ]]; then
            git_credential='osxkeychain'
        fi

        sh_user 'What is your github author name?  (username)'
        read -r -e git_authorname
        sh_user 'What is your github author email?  (username@users.noreply.github.com)'
        read -r -e git_authoremail

        sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" $DOTFILES/git/gitconfig.symlink.example > $DOTFILES/git/gitconfig.symlink

        sh_success 'gitconfig.symlink is now ready for symlinking to ~/.gitconfig'
    fi
}

setup_gitconfig

#-----------------------------------------------------------------------
# SYMLINK DOTFILES
#-----------------------------------------------------------------------

. $DOTFILES/functions/link_file
. $DOTFILES/functions/install_dotfiles

install_dotfiles

#-----------------------------------------------------------------------
# HOMEBREW + GIT + RUBY + base libs/bins
#-----------------------------------------------------------------------
# Here's is the install list/order:
#   * Linux libraries/dependencies
#   * Homebrew (Mac-only)
#   * Git
#   * rbenv
#   * Ruby
#   * Bundler (Linux-only)

. $DOTFILES/brew/install.sh

# sh_info "Configuring homebrew permissions to allow multiple admin users."
# sh_info "Any user from the admin group will be able to manage homebrew."

# declare -a HOMEBREW_DIRS=(
#     "$(brew --prefix)/Caskroom"
#     "$(brew --prefix)/Cellar"
#     "$(brew --prefix)/Homebrew"
#     "$(brew --prefix)/etc"
#     "$(brew --prefix)/lib"
#     "$(brew --prefix)/share"
#     "$(brew --prefix)/var"
# )

# for brew_dir in "${HOMEBREW_DIRS[@]}"; do
#     if [[ ! -d "${brew_dir}" ]]; then
#         sh_info "Creating directory: ${brew_dir}"
#         mkdir "${brew_dir}"
#     fi
#     sh_info "Changing group ownership of directory: ${brew_dir}"
#     sudo chgrp -R admin "${brew_dir}"
#     sudo chmod -R g+w "${brew_dir}"
# done

# ls -al "$(brew --prefix)"

. $DOTFILES/git/install.sh
. $DOTFILES/ruby/install.sh

#-----------------------------------------------------------------------
# Zshell + Prezto
#-----------------------------------------------------------------------

# We install Prezto first so that it's ready for Zsh.
. $DOTFILES/prezto/install.sh
# Install Zshell + Zsh-completions
. $DOTFILES/zsh/install.sh

#-----------------------------------------------------------------------
# OS CONDITIONALS
#-----------------------------------------------------------------------

# If we're on a Mac, let's install and setup homebrew.
if [[ "$OSTYPE" == "darwin"* ]]; then
    sh_info "installing dependencies"
    #if source bin/dot > /tmp/dotfiles-dot 2>&1; then
    #    sh_success "dependencies installed"
    #else
    #    sh_fail "error installing dependencies"
    #fi
fi

echo ""

sh_success "Bootstrapping complete!"

sh_alert "Restart your terminal/shell, and take the next step."

echo ""
