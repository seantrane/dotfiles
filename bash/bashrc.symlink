#!/usr/bin/env bash
#
# BASH RC
#
# Bash run-control file.
# See table below for processing information.
#
# Bash executes A, then B, then C, etc.
# The B1, B2, B3 means it executes only the first of those files found.
# +----------------+-----------+-----------+------+
# |                |Interactive|Interactive|Script|
# |                |login      |non-login  |      |
# +----------------+-----------+-----------+------+
# |/etc/profile    |   A       |           |      |
# +----------------+-----------+-----------+------+
# |/etc/bash.bashrc|           |    A      |      |
# +----------------+-----------+-----------+------+
# |~/.bashrc       |           |    B      |      |
# +----------------+-----------+-----------+------+
# |~/.bash_profile |   B1      |           |      |
# +----------------+-----------+-----------+------+
# |~/.bash_login   |   B2      |           |      |
# +----------------+-----------+-----------+------+
# |~/.profile      |   B3      |           |      |
# +----------------+-----------+-----------+------+
# |BASH_ENV        |           |           |  A   |
# +----------------+-----------+-----------+------+
# +----------------+-----------+-----------+------+
# |~/.bash_logout  |    C      |           |      |
# +----------------+-----------+-----------+------+
#
# Moral: Put stuff in `~/.bashrc `, make `~/.bash_profile` source it.
#
# Almost everything should go in the “general configuration” section.
# There might be some commands (those which produce output, etc.)
# that you only want executed when the shell is interactive, and
# not in scripts, which you can put in the “conditional section”.
#
# shellcheck disable=SC1090,SC1091

#-----------------------------------------------------------------------
# Load `.env` a.k.a. `~/.dotfiles/shell/env.symlink`
#-----------------------------------------------------------------------
# This file should be loaded first in all shell environments,
# in the following files; `~/.bashrc` and `~/.zshenv`

# . ~/.env
[[ -f "$HOME/.env" ]] && . "$HOME/.env"


########################################################################
########################################################################
##
##  GENERAL CONFIGURATION
##  (stuff that you always want executed)
##
########################################################################
########################################################################

# autoload every function:
# for file in ~/.dotfiles/functions/{extract,link_file}; do
# shellcheck disable=SC2044
for file in $(find -H "$DOTFILES/functions" -maxdepth 2 -name '[A-Za-z0-9\-\_]*'); do
  [[ -r "$file" ]] && [[ -f "$file" ]] && . "$file"
done
unset file

########################################################################
##  THE END: GENERAL CONFIGURATION
########################################################################


########################################################################
########################################################################
##
##  1. SCRIPT / NON-INTERACTIVE / .bash_env
##
##  Only for NON-interactive shells (ie; scripts)
##  See `~/.bash_env` for bash-script-resources.
##  Bash scripts typically would not process this file,
##  so this section can be ignored unless required.
##
########################################################################
if [[ -z "$PS1" ]]; then
: ######################################################################
# echo "$SHELL"



########################################################################
########################################################################
##
##  2. INTERACTIVE / PROMPT / .bashrc
##
##  This is executed only for interactive shells.
##  If you have a command-prompt, this conditional was met.
##  Put stuff here for prompt-based users only.
##
########################################################################
else
: ######################################################################
# echo "$SHELL::interactive"

#-----------------------------------------------------------------------
# RUN-CONTROLS
#-----------------------------------------------------------------------

# GRC colorizes nifty unix tools all over the place
if type "grc" &> /dev/null; then
  # Homebrew GRC: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/grc.rb
  if type "brew" &> /dev/null && [[ -f "$(brew --prefix)/etc/grc.bashrc" ]]; then
    . "$(brew --prefix)/etc/grc.bashrc"
  elif [[ -f "/etc/grc.bashrc" ]]; then
    . "/etc/grc.bashrc"
  fi
fi

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
[[ -f "$HOME/.localrc" ]] && . "$HOME/.localrc"

#-----------------------------------------------------------------------
# PROMPT OPTIONS
#-----------------------------------------------------------------------

# `~/.bash_prompt` can be used for custom prompt configuration.
[[ -f "$HOME/.bash_prompt" ]] && . "$HOME/.bash_prompt"


#-----------------------------------------------------------------------
# ALIASES
#-----------------------------------------------------------------------
# Aliases should only be available to prompt-user (not scripts).

# for file in ~/.dotfiles/{git,system}/aliases.zsh; do
# shellcheck disable=SC2044
for file in $(find -H "$DOTFILES" -maxdepth 2 -name 'aliases.zsh'); do
  [[ -r "$file" ]] && [[ -f "$file" ]] && . "$file"
done;
unset file;

# `~/.aliases` can be used for private aliases.
[[ -f "$HOME/.aliases" ]] && . "$HOME/.aliases"


#-----------------------------------------------------------------------
# BASH OPTIONS
#-----------------------------------------------------------------------

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob;

# Append to the Bash history file, rather than overwriting it
shopt -s histappend;

# Autocorrect typos in path names when using `cd`
shopt -s cdspell;

# Enable some Bash 4 features when possible:
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
for option in autocd globstar; do
  shopt -s "$option" 2> /dev/null;
done;

#-----------------------------------------------------------------------
# TAB COMPLETION
#-----------------------------------------------------------------------

# Only if Bash-version is >= 4
if [[ ${BASH_VERSION%%[^0-9]*} -ge 4 ]]; then

  # Add tab completion for many Bash commands
  # Thanks to @tmoitie, adds more tab completion for bash,
  # also when hitting tab twice it will show a list.
  if type "brew" &> /dev/null && [[ -f "$(brew --prefix)/share/bash-completion/bash_completion" ]]; then
    . "$(brew --prefix)/share/bash-completion/bash_completion"
  elif type "brew" &> /dev/null && [[ -f "$(brew --prefix)/share/bash-completion" ]]; then
    . "$(brew --prefix)/share/bash-completion"
  elif [[ -f "/etc/bash_completion" ]]; then
    # shellcheck disable=SC1090,SC1091
    . "/etc/bash_completion"
  fi

  # load every completion after autocomplete loads:
  # for file in ~/.dotfiles/{git,system}/completion.bash; do
  # shellcheck disable=SC2044
  for file in $(find -H "$DOTFILES" -maxdepth 2 -name 'completion.bash'); do
    # shellcheck disable=SC1090,SC1091
    [[ -r "$file" ]] && [[ -f "$file" ]] && . "$file"
  done
  unset file

fi

# z - jump around
# https://github.com/rupa/z
# Tracks your most used directories, based on 'frecency'.
# After a short learning phase, z will take you to the most 'frecent' directory
# that matches ALL of the regexes given on the command line, in order.
if [[ -f "$HOME/z/z.sh" ]]; then
  . "$HOME/z/z.sh"
elif type "brew" &> /dev/null && [[ -f "$(brew --prefix)/etc/profile.d/z.sh" ]]; then
  . "$(brew --prefix)/etc/profile.d/z.sh"
fi

#-----------------------------------------------------------------------
# Travis CI
#-----------------------------------------------------------------------
[[ -f "$HOME/.travis/travis.sh" ]] && . "$HOME/.travis/travis.sh"


########################################################################
########################################################################
##
##  3. LOGIN / .bash_profile / .bash_login
##
##  This is executed only when it is a login shell.
##  Put your `~/.bash_profile` and `~/.bash_login` stuff here.
##
########################################################################
if shopt -q login_shell ; then
: ######################################################################
# echo "$SHELL::interactive-login"

THIS_USER=${USER:-$(id -un || echo "\u")}
THIS_HOST=${HOST:-${HOSTNAME:-$(hostname || echo "\h")}}
THIS_SYS=${UTYPE:-${OSTYPE:-$(uname || echo "")}}
THIS_MACH=${UMACH:-${MACHTYPE:-$(uname -m || echo "")}}
THIS_ARCH=${UARCH:-${HOSTTYPE:-$(uname -p || echo "")}}

echo -e "\n"
echo -e "\n SYSTEM ❯ ${THIS_SYS} ${THIS_MACH} ${THIS_ARCH} \n"
echo -e "\n SHELL  ❯ $(${SHELL:-} --version | head -n 1)\n"
echo -e "\n USER   ❯ ${THIS_USER:-} @ ${THIS_HOST} (${LANG:-}) \n"
echo -e "\n HOME   ❯ ${HOME:-} \n"
echo -e "\n"


########################################################################
########################################################################
##
##  4. NON-LOGIN / .bash_profile
##
##  Only when it is NOT a login shell.
##  This is the default `~/.bashrc` environment.
##  That means this can be ignored unless considerations
##  are required for NON-LOGIN USERS ONLY.
##
########################################################################
else
: ######################################################################
# echo "$SHELL::interactive-nonlogin"



########################################################################
fi #####################################################################
##
##  THE END: CONDITIONAL CONFIGURATION
##
fi #####################################################################
########################################################################

