# shellcheck shell=zsh disable=SC1090,SC1091
#
# ZSH ENV
#
# Defines Zshell environment.
#
# There are five startup files that zsh will read commands from:
#   * $ZDOTDIR/.zshenv
#   * $ZDOTDIR/.zprofile
#   * $ZDOTDIR/.zshrc
#   * $ZDOTDIR/.zlogin
#   * $ZDOTDIR/.zlogout
#
# If ZDOTDIR is not set, then the value of HOME is used; this is the usual case.
# `.zshenv' is sourced on all invocations of the shell, unless the -f option is set.
# It should contain commands to set the command search path,
# plus other important environment variables.
# `.zshenv' should not contain commands that produce output
# or assume the shell is attached to a tty.
#
# `.zshrc' is sourced in interactive shells. It should contain commands
# to set up aliases, functions, options, key bindings, etc.
#
# `.zlogin' is sourced in login shells. It should contain commands that
# should be executed only in login shells. `.zlogout' is sourced when
# login shells exit. `.zprofile' is similar to `.zlogin', except that
# it is sourced before `.zshrc'. `.zprofile' is meant as an alternative
# to `.zlogin' for ksh fans; the two are not intended to be used together,
# although this could certainly be done if desired.
#
# `.zlogin' is not the place for alias definitions, options,
# environment variable settings, etc.; as a general rule, it should not
# change the shell environment at all. Rather, it should be used to
# set the terminal type and run a series of external commands (fortune, msgs, etc).
#
# See table below for processing information.
#
# Zsh executes A, then B, then C, etc.
# +----------------+-----------+-----------+------+
# |                |Interactive|Interactive|Script|
# |                |login      |non-login  |      |
# +----------------+-----------+-----------+------+
# |/etc/zshenv     |    A      |    A      |  A   |
# +----------------+-----------+-----------+------+
# |  ~/.zshenv     |    B      |    B      |  B   | <<< This sets $PATH
# +----------------+-----------+-----------+------+
# |/etc/zprofile   |    C      |           |      | <<< This overwrites $PATH =(
# +----------------+-----------+-----------+------+
# |  ~/.zprofile   |    D      |           |      |
# +----------------+-----------+-----------+------+
# |/etc/zshrc      |    E      |    C      |      |
# +----------------+-----------+-----------+------+
# |  ~/.zshrc      |    F      |    D      |      | <<< This resets $PATH
# +----------------+-----------+-----------+------+
# |/etc/zlogin     |    G      |           |      |
# +----------------+-----------+-----------+------+
# |  ~/.zlogin     |    H      |           |      |
# +----------------+-----------+-----------+------+
# +----------------+-----------+-----------+------+
# |  ~/.zlogout    |    I      |           |      |
# +----------------+-----------+-----------+------+
# |/etc/zlogout    |    J      |           |      |
# +----------------+-----------+-----------+------+
#
# Moral: Put stuff in `~/.zshenv`, which is always executed.
# HOWEVER: Some config may be overwritten by `/etc/zprofile` or `/etc/zshrc`.
# So, you have to put some config in `~/.zshrc` (e.g., prompt config).
#
# Use the Conditional Sections as needed:
#   1. SCRIPT / NON-INTERACTIVE / .zshenv
#   2. INTERACTIVE / PROMPT / .zshrc
#   3. LOGIN / .zprofile / .zlogin
#   4. NON-LOGIN / .zprofile
#
# NOTE: This is different from how Bash is processed (see `~/.bashrc`).

_SHELL_TYPE="prompt"
_SHELL_USER="public"
[[ "$SHLVL" -eq 1 && ! -o LOGIN ]] && _SHELL_TYPE="script"
[[ -o LOGIN ]] && _SHELL_TYPE="private"
# [[ "$_SHELL_TYPE" = "prompt" ]] && echo "$SHELL::$_SHELL_TYPE-$_SHELL_USER"

#-------------------------------------------------------------------------------
# Ensure that non-login/non-interactive shell has a defined environment.
#-------------------------------------------------------------------------------

if [[ "$SHLVL" -eq 1 && ! -o LOGIN && -s "${ZDOTDIR:-$HOME}/.zprofile" ]]; then
  . "${ZDOTDIR:-$HOME}/.zprofile"
fi

#-----------------------------------------------------------------------
# HOMEBREW INIT
#-----------------------------------------------------------------------

[[ -f "$DOTFILES/brew/init.sh" ]] && . "$DOTFILES/brew/init.sh"

#-------------------------------------------------------------------------------
# Load `.env` a.k.a. `~/.dotfiles/shell/env.symlink`
#-------------------------------------------------------------------------------
# This file should be loaded first in all shell environments,
# in the following files; `~/.bashrc` and `~/.zshenv`

[[ -f "${ZDOTDIR:-$HOME}/.env" ]] && . "${ZDOTDIR:-$HOME}/.env"

#-------------------------------------------------------------------------------
# PATHS
#-------------------------------------------------------------------------------

# Set the the list of directories that cd searches.
# cdpath=(
#   $cdpath
# )

# Set the list of directories that Zsh searches for programs.
# path=(
#   $(brew --prefix)/{bin,sbin}
#   $path
# )

# Ensure path arrays do not contain duplicates.
# typeset -gU cdpath fpath mailpath path


################################################################################
################################################################################
##
##  GENERAL CONFIGURATION
##  (stuff that you always want executed)
##
################################################################################
################################################################################

# autoload every function:
fpath=("$DOTFILES"/functions $fpath)
autoload -U "$DOTFILES"/functions/*(:t)

# add each topic folder to fpath so that they can add functions and completion scripts
# for topic_folder ($DOTFILES/*) if [[ -d $topic_folder ]]; then  fpath=($topic_folder $fpath); fi;

#-------------------------------------------------------------------------------
# Changing Directories
#-------------------------------------------------------------------------------

# `cd` is run if a valid command is not found
# auto 'cd dir' if you type 'dir'
setopt AUTO_CD

# `cd` pushes the old directory onto the directory stack
# This makes cd=pushd
setopt AUTO_PUSHD

# If arg is not a directory, see if it's a variable, and `cd` to its value
setopt CDABLE_VARS

# this will ignore multiple directories for the stack.
setopt PUSHD_IGNORE_DUPS

setopt PUSHD_MINUS

# `pushd` and `popd` will no longer print the directory name
# No more annoying pushd messages...
# setopt PUSHD_SILENT

# `pushd` with no arguments act like 'pushd $HOME'
setopt PUSHD_TO_HOME

#-------------------------------------------------------------------------------
# Completion
#-------------------------------------------------------------------------------

# don't expand aliases _before_ completion has finished, like; git comm-[tab]
setopt complete_aliases

setopt COMPLETE_IN_WORD

# Immediately cycle through options for tab completion
# setopt MENU_COMPLETE

# Do not beep during listing completions
setopt NO_LIST_BEEP

#-------------------------------------------------------------------------------
# Expansion and Globbing
#-------------------------------------------------------------------------------

# I don't know why I never set this before.
setopt EXTENDED_GLOB

# If we have a glob this will expand it
setopt GLOB_COMPLETE

# Case insensitive globbing
setopt NO_CASE_GLOB

# Be Reasonable!
setopt NUMERIC_GLOB_SORT

# hows about arrays be awesome?
# (that is, foo${cool}foo has foo surrounding all the variables, not just first and last
setopt RC_EXPAND_PARAM

#-------------------------------------------------------------------------------
# History
#-------------------------------------------------------------------------------

# adds history
setopt APPEND_HISTORY

# Save command timestamps
setopt EXTENDED_HISTORY

# If the internal history needs to be trimmed to add the current command line,
# remove the oldest history event that has a duplicate.  You should be sure to set the value of HISTSIZE to a larger number than SAVEHIST in order to give you some room for the duplicated events, otherwise this option will behave just like HIST_IGNORE_ALL_DUPS once the history fills up with unique events.
setopt HIST_EXPIRE_DUPS_FIRST

# When searching for history entries in the line editor,
# do not display duplicates of a line previously found,
# even if the duplicates are not contiguous.
setopt HIST_FIND_NO_DUPS

# If a new command line being added to the history list duplicates an older one
# then the older command is removed from the list
setopt HIST_IGNORE_ALL_DUPS

# Don't save command if preceded by whitespace
setopt HIST_IGNORE_SPACE

# Trim unnecessary whitespace from commands in history
setopt HIST_REDUCE_BLANKS

# allow functions to have local traps
setopt HIST_VERIFY

# adds history incrementally
setopt INC_APPEND_HISTORY

# Share command history between active shell sessions
setopt SHARE_HISTORY

#-------------------------------------------------------------------------------
# Initialisation
#-------------------------------------------------------------------------------

# Don't globally export environment variables by default
# setopt NO_GLOBAL_EXPORT

#-------------------------------------------------------------------------------
# Input/Output
#-------------------------------------------------------------------------------

# This will use named dirs when possible
setopt AUTO_NAME_DIRS

# Output hex numbers in the familiar C syntax (e.g. '0x2f')
# setopt C_BASES

setopt CORRECT

# don't log out on EOF
setopt IGNORE_EOF

# Allow comments, even in an the interactive shell
# setopt INTERACTIVE_COMMENTS

# allow functions to have local options
setopt LOCAL_OPTIONS

# allow functions to have local traps
setopt LOCAL_TRAPS

# Keep echo "station" > station from clobbering station
# don't overwrite files unless forced
setopt NO_CLOBBER

# Output octal numbers in the familiar C syntax (e.g. '077')
# setopt OCTAL_ZEROES

# 10 second wait if you do something that will delete everything.  I wish I'd had this before...
setopt RM_STAR_WAIT

# Print the exit value of programs with non-zero exit status
# setopt PRINT_EXIT_VALUE

#-------------------------------------------------------------------------------
# Job Control
#-------------------------------------------------------------------------------

# When disowning a process, send a SIGCONT
# setopt AUTO_CONTINUE

# Single letter commands call `fg`
# setopt AUTO_RESUME

# List jobs in a verbose format
# setopt LONG_LIST_JOBS

# zsh sends SIGHUP to running background jobs.
# setopt NO_HUP config only sends SIGHUP in certain situations.
setopt NO_HUP

# don't nice background tasks
setopt NO_BG_NICE

# If I could disable Ctrl-s completely I would!
setopt NO_FLOW_CONTROL

#-------------------------------------------------------------------------------
# Prompt
#-------------------------------------------------------------------------------

# Enable prompt substitution
setopt PROMPT_SUBST

# Clear right-side prompt upon submission of command
# setopt TRANSIENT_RPROMPT

#-------------------------------------------------------------------------------
# Scripts and Functions
#-------------------------------------------------------------------------------

# Pipe to multiple outputs
setopt MULTIOS

#-------------------------------------------------------------------------------
# Shell Emulation
#-------------------------------------------------------------------------------

# Use a version of `echo` compatible with bash
# setopt BSD_ECHO

#-------------------------------------------------------------------------------
# Zle
#-------------------------------------------------------------------------------

# use magic (this is default, but it can't hurt!)
# ! DISABLED: can't change option: ZLE
# setopt ZLE

zle -N newtab

#-------------------------------------------------------------------------------

# In the line editor, the number of matches to list without asking first.  If
# the value is negative, the list will be shown if it spans at most as many
# lines as given by the absolute value.  If set to zero, the shell asks only if
# the top of the listing would scroll off the screen.
# typeset -gx LISTMAX=0

# Duration to wait for further input during a key-sequence
# (in hundredths of a second)
# typeset -gx KEYTIMEOUT=20

#-------------------------------------------------------------------------------

# Who doesn't want home and end to work?
bindkey '\e[1~' beginning-of-line
bindkey '\e[4~' end-of-line

# Incremental search is elite!
bindkey -M vicmd "/" history-incremental-search-backward
bindkey -M vicmd "?" history-incremental-search-forward

# Search based on what you typed in already
bindkey -M vicmd "//" history-beginning-search-backward
bindkey -M vicmd "??" history-beginning-search-forward

bindkey "\eOP" run-help

# oh wow! This is killer... try it!
bindkey -M vicmd "q" push-line

# it's like, space AND completion. Gnarlbot.
bindkey -M viins ' ' magic-space

bindkey '^[^[[D' backward-word
bindkey '^[^[[C' forward-word
bindkey '^[[5D' beginning-of-line
bindkey '^[[5C' end-of-line
bindkey '^[[3~' delete-char
bindkey '^[^N' newtab
bindkey '^?' backward-delete-char

#-------------------------------------------------------------------------------

# export LSCOLORS="exfxcxdxbxegedabagacad"
export CLICOLOR=true

# Colorize BSD `ls`
# typeset -gx CLICOLOR=1
# typeset -gx LSCOLORS='exfxcxdxbxegedabagacad'
# Colorize tree even when used in pipes
# typeset -Tgx LS_COLORS ls_colors ':'
# ls_colors=(
#   'no=00' 'fi=00' 'di=01;34' 'ln=01;31' 'pi=40;33' 'so=01;35' 'bd=40;33;01'
# 	'rs=0' 'mh=00' 'do=01;35' 'cd=40;33;01'
# 	'mi=00' 'su=37' 'sg=30' 'ca=30' 'tw=30'
# 	'ow=01;33' 'or=40;31;01' 'st=37' 'ex=01;32'
# 	'*.'{deb,rpm,dmg,pkg}'=01;33'
# 	'*.'{tar,gz,tgz,7z,t7z,zip,bz{,2},arj,jar,rar,lzh,taz,z,Z}'=01;31'
# 	'*.'{{m,j}p{,e}g,jpg,gif,bmp,png,svg,tif{,f},tga,p{b,g,p}m,x{b,p}}m,xcf,fli,gl}'=01;36'
# 	'*.jpg=01;36'
# 	'*.'{mov,m4{a,b,v},mp{3,4},mp{,e}g,fl{,a}c,ogg,mkv,avi,aac,wav}'=01;35'
# )
# typeset -gx zls_colors=(${ls_colors})

# default history settings
HISTFILE="${ZDOTDIR:-$HOME}/.zsh_history"
HISTSIZE=10000
SAVEHIST=10000

#-------------------------------------------------------------------------------
# Temporary Files
#-------------------------------------------------------------------------------

if [[ ! -d "$TMPDIR" ]]; then
  export TMPDIR="/tmp/$LOGNAME"
  # shellcheck disable=SC2174
  mkdir -p -m 700 "$TMPDIR"
fi

TMPPREFIX="${TMPDIR%/}/zsh"; export TMPPREFIX


################################################################################
##  THE END: GENERAL CONFIGURATION
################################################################################
