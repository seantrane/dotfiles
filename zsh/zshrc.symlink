# shellcheck shell=bash disable=SC1090,SC1091,SC2034,SC2086,SC2296
#          _
#  _______| |__  _ __ ___
# |_  / __| '_ \| '__/ __|
#  / /\__ \ | | | | | (__
# /___|___/_| |_|_|  \___|
# ========================
#
# Zsh run-control file.
#
# `.zshrc' is sourced in interactive shells. It should contain commands
# to set up aliases, functions, options, key bindings, etc.
#
# Put stuff in conditional section of `~/.zshenv`.
# See comments in `~/.zshenv` for detailed summary.
#
# Zsh Reference Card: https://www.bash2zsh.com/zsh_refcard/refcard.pdf
# ZSH-LOVERS(1): https://grml.org/zsh/zsh-lovers.html

# Fix Shell PATH Issue (overwritten by .zprofile)
DEFAULT_PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
# remove defaults from beginning of PATH
PATH="${PATH#"$DEFAULT_PATH:"}"
# put defaults back at end of PATH
PATH="$PATH:$DEFAULT_PATH"

type "find_files" &> /dev/null || . "$DOTFILES/functions/find_files"

#-------------------------------------------------------------------------------
# Load `.env` a.k.a. `~/.dotfiles/shell/env.symlink`
#-------------------------------------------------------------------------------
# This file should be loaded first in all shell environments,
# in the following files; `~/.bashrc` and `~/.zshenv`.
# It is required in `~/.zshenv` so script-shell-env uses user bin/functions.
# It is required a 2nd time, here in `~/.zshrc`, because `/etc/zprofile`
# overwrites the PATH variable before `~/.zshrc` is executed. =(

[[ -f "${ZDOTDIR:-$HOME}/.env" ]] && . "${ZDOTDIR:-$HOME}/.env"


################################################################################
################################################################################
##
##  1. SCRIPT / NON-INTERACTIVE / .zshenv
##
##  Only for NON-interactive shells (ie; scripts)
##  Put your script-only stuff here, otherwise
##  this section can be ignored.
##
################################################################################
if [[ "$SHLVL" -eq 1 ]] && [[ ! -o LOGIN ]]; then
: ##############################################################################
# echo "$SHELL"



################################################################################
################################################################################
##
##  2. INTERACTIVE / PROMPT / .zshrc
##
##  This is executed only for interactive shells.
##  If you have a command-prompt, this conditional was met.
##  Put stuff here for prompt-based users only.
##
################################################################################
else
: ##############################################################################
# echo "$SHELL::interactive"

#-------------------------------------------------------------------------------
# Source/init Prezto.
#-------------------------------------------------------------------------------

_zpreztod="${ZDOTDIR:-$HOME}/.zprezto"
[[ -f "$_zpreztod/init.zsh" ]] && . "$_zpreztod/init.zsh"

# Prezto init will prepend PATH with `~/.gem/ruby/*/bin` directory in
# `~/.zprezto/modules/ruby/init.zsh`, line 48.
# These commands will strip this out, as `~/.gem/ruby/*/bin` is already in PATH.
for _file in $(find_files "${ZDOTDIR:-$HOME}/.gem/ruby" 'bin' 2 'd'); do
  PATH="${PATH#"${_file}:"}"
done

# Unalias `nocorrect` completions from: ~/.zprezto/modules/utility/init.zsh
# unalias mkdir mv mysql rm

#-------------------------------------------------------------------------------
# LOCAL/PRIVATE CONFIG
#-------------------------------------------------------------------------------

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
[[ -f "${ZDOTDIR:-$HOME}/.localrc" ]] && . "${ZDOTDIR:-$HOME}/.localrc"

#-------------------------------------------------------------------------------
# ALIASES
#-------------------------------------------------------------------------------
# Aliases should only be available to prompt-user (not scripts).

alias reload!='. ~/.zshrc'

# for file in ~/.dotfiles/{git,system}/aliases.sh; do
for _file in $(find_files "$DOTFILES" 'aliases.sh' 2); do . "$_file"; done

# for file in ~/.dotfiles/{git,system}/aliases.zsh; do
for _file in $(find_files "$DOTFILES" 'aliases.zsh' 2); do . "$_file"; done

# `~/.aliases` can be used for private aliases.
[[ -f "${ZDOTDIR:-$HOME}/.aliases" ]] && . "${ZDOTDIR:-$HOME}/.aliases"

# From http://dotfiles.org/~_why/.zshrc
# Sets the window title nicely no matter where you are
function title() {
  # escape '%' chars in $1, make nonprintables visible
  a=${(V)1//\%/\%\%}
  # Truncate command, and join lines.
  a=$(print -Pn "%40>...>$a" | tr -d "\n")
  case $TERM in
    screen)
      print -Pn "\ek$a:$3\e\\" # screen title (in ^A")
    ;;
    xterm*|rxvt)
      print -Pn "\e]2;$2\a" # plain xterm title ($3 for pwd)
    ;;
  esac
}

# moving-or-renaming-multiple-files
# http://www.mfasold.net/blog/2008/11/moving-or-renaming-multiple-files/
# “mmv *.dat *.dat_old” or “mmv foo.* bar.*”
# “mmv **/*2008.mp3 **/*2009.mp3”
autoload -U zmv
alias mmv='noglob zmv -W'

# http://apt-browse.org/browse/debian/wheezy/main/all/command-not-found/
[[ -f "/etc/zsh_command_not_found" ]] && . "/etc/zsh_command_not_found"

#-------------------------------------------------------------------------------
# TAB COMPLETION
#-------------------------------------------------------------------------------

# Disable autocorrect guesses. Happens when typing a wrong
# command that may look like an existing one.
unsetopt CORRECT

# This bunch of code displays red dots when autocompleting
# a command with the tab key, "Oh-my-zsh"-style.
expand-or-complete-with-dots() {
  # shellcheck disable=2028
  echo -n "\e[31m......\e[0m"
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots

# fignore() An array containing the suffixes of files to be
# ignored during filename completion.  However, if completion only
# generates files with suffixes in this list, then these files are
# completed anyway.
typeset -Ua fignore=(
  .DS_Store
  __pycache__
  .zip
  .tgz
)

# REPORTTIME: commands whose combined user and system execution
# times (measured in seconds) are greater than this value have
# timing statistics printed for them.  Output is suppressed for
# commands executed within the line editor, including completion;
# commands explicitly marked with the time keyword still cause
# the summary to be printed in this case.
typeset REPORTTIME=5

# initialize autocomplete here, otherwise functions won't be loaded
# compinit flags are defined as follows
# -d FILE: dump a cache of compiled completion scripts to FILE
# -C: skip the security check entirely
# NOTE: will prevent changes from being made to the completions
# cached in the dump file
# -u: silently include all insecure files and directories
# -i: silently ignore all insecure files and directories
autoload -U compinit
compinit -u

# Initialize module to provide compatibility for bash-based completion functions
# autoload -U +X bashcompinit
# bashcompinit

# matches case insensitive for lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending

# Zsh to use the same colors as ls
# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

#-------------------------------------------------------------------------------

# Homebrew-Zsh help reset
_zshhelpf="${HOMEBREW_PREFIX:-}/share/zsh/help"
if [[ -f "$_zshhelpf" ]]; then
  unalias run-help
  autoload run-help
  export HELPDIR="$_zshhelpf"
fi

# load every completion after autocomplete loads:
# for file in ~/.dotfiles/{git,system}/completion.zsh; do
for _file in $(find_files "$DOTFILES" 'completion.zsh' 2); do . "$_file"; done

# To activate Homebrew-Zsh-completions, add to .zshrc:
if type brew &>/dev/null; then
  FPATH=${HOMEBREW_PREFIX:-}/share/zsh/site-functions:$FPATH
  FPATH=${HOMEBREW_PREFIX:-}/share/zsh-completions:$FPATH

  autoload -Uz compinit
  compinit
fi

# z - jump around
# https://github.com/rupa/z
# Tracks your most used directories, based on 'frecency'.
# After a short learning phase, z will take you to the most 'frecent' directory
# that matches ALL of the regexes given on the command line, in order.
if [[ -f "$HOME/z/z.sh" ]]; then
  . "$HOME/z/z.sh"
elif [[ -f "${HOMEBREW_PREFIX:-}/etc/profile.d/z.sh" ]]; then
  . "${HOMEBREW_PREFIX:-}/etc/profile.d/z.sh"
fi

#-------------------------------------------------------------------------------
# Less - opposite of more
#-------------------------------------------------------------------------------
# Less is a program similar to more (1), but which allows
# backward movement in the file as well as forward movement.
# Also, less does not have to read the entire input file
# before starting, so with large input files it starts up faster
# than text editors like vi.

# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-F -g -i -M -R -S -w -X -z-4'

# Set the Less input preprocessor.
# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
# shellcheck disable=SC1009,SC1072,SC1073
# if (( $#commands[(i)lesspipe(|.sh)] )); then
#   export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
# fi
_lesspipe="${HOMEBREW_PREFIX}/bin/lesspipe"
_lesspipef="$_lesspipe.sh"
[[ -e "$_lesspipe" ]] && _lesspipef="$_lesspipe"
LESSOPEN="|$_lesspipef %s"; export LESSOPEN                     #(sh like shell)
type "setenv" &> /dev/null && setenv LESSOPEN "|$_lesspipef %s" #(csh, tcsh)


#-------------------------------------------------------------------------------
# LS COLORS
#-------------------------------------------------------------------------------

[[ -r "$DOTFILES/shell/ls_colors.sh" ]] && . "$DOTFILES/shell/ls_colors.sh"

zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

#-------------------------------------------------------------------------------
# PROMPT OPTIONS
#-------------------------------------------------------------------------------

autoload -Uz promptinit
promptinit
prompt sorin


################################################################################
################################################################################
##
##  THE END: SCRIPT/INTERACTIVE CONDITIONAL CONFIGURATION
##
fi #############################################################################
################################################################################
